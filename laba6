import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.Test;

import static org.junit.Assert.*;


class StringCalculatorTest {   // ЮНИТ ТЕСТ

    @Test
    public static void testAdd(Fraction a, String input, String answer) {
        if (Objects.equals(a.currentfrac(), "0/0")) { // Проверка дробей на знаменатель = 0
            System.out.println("Ошибка. Деление на 0.");
            System.out.println(input + " = " + "??");
            System.out.println();
        } else if (Objects.equals(a.currentfrac(), "3/3")) { // Проверка дробей некорректный ввод
            System.out.println("Некорректный ввод!");
            System.out.println(input + " = " + "??");
            System.out.println();
        } else {
            assertEquals(answer, a.currentfrac()); // Если все в порядке
            System.out.println("Результат:");
            System.out.println(input + " = " + answer);
            System.out.println();
        }
    }
}

class Fraction {
    public int num, den;

    public Fraction() { // Базовая дробь
        num = 1;
        den = 1;
    }

    public Fraction(int a, int b) { // Создание дроби
        num = a;
        den = b;
    }

    public String currentfrac() { // Вывод данной дроби
        return (num + "/" + den);
    }

    public static String sum(Fraction frac1, Fraction frac2) { // Сумма дробей
        return (frac1.num * frac2.den + frac1.den * frac2.num) + "/" + (frac1.den * frac2.den);
    }

    public static String min(Fraction frac1, Fraction frac2) { // Разность дробей
        return (frac1.num * frac2.den - frac1.den * frac2.num) + "/" + (frac1.den * frac2.den);
    }

    public static String multi(Fraction frac1, Fraction frac2) { // Произведение дробей
        return (frac1.num * frac2.num) + "/" + (frac2.den * frac1.den);
    }

    public static String div(Fraction frac1, Fraction frac2) { // Частное дробей
        return (frac1.num * frac2.den) + "/" + (frac1.den * frac2.num);
    }

    static int gcd(int a, int b) { // Скоращение дроби
        if (a == 0) return b;
        if (b == 0) return a;
        if (a >= b) return gcd(a % b, b);
        return gcd(a, b % a);
    }

    public static Fraction process(String phrase) { // Главный процесс, который преобразует исходную строку в конечную дробь
        int numerator, denominator, flag = 0;
        String staples = "";
        String[] time = phrase.split(" "); // разделяем строки
        ArrayList words = new ArrayList<>();
        for (int i = 0; i != time.length; i++) {
            words.add(time[i]);
        }
        for (int i = 0; i != words.size(); i++) {
            if (words.get(i).equals("(")) {
                words.set(i, "");
                flag = 1;

                continue;
            } else if (words.get(i).equals(")")) {
                flag = 0;
                words.set(i, "");
                words.set(i, Fraction.process(staples).currentfrac());
                for (int j = 0; j < words.size(); j += 1) { // удаляем пустоты
                    if (Objects.equals((String) words.get(i), "")) {
                        words.remove(j);
                    }
                }

            } else if (flag == 1){
                staples += (String) words.get(i) + " ";
                words.set(i, "");
            }
        }
        for (int i = 0; i < words.size(); i += 1) { // удаляем пустоты
            if (Objects.equals((String) words.get(i), "")) {
                words.remove(i);
            }
        }
        for (int i = 0; i < words.size(); i++) {
            if (i % 2 == 0) {
                Pattern pattern = Pattern.compile("^-?\\d+/0\\d*?$");
                Matcher matcher = pattern.matcher((String)words.get(i));
                Pattern pattern1 = Pattern.compile("^[-+]?\\d+/[-+]?\\d+$");
                Matcher matcher1 = pattern1.matcher((String)words.get(i));
                if (matcher.matches()) {
//                        System.out.println("Знаменатель не может равняться нулю! Попробуйте еще раз!");
                    Fraction piggybank = new Fraction(0, 0);
                    return piggybank;
                } else if (!matcher1.matches()) {
//                        System.out.println("Дробь некорректна. Попробуйте еще раз!");
                    Fraction piggybank = new Fraction(3, 3);
                    return piggybank;
                }
            } else {
                if ((!(Objects.equals((String)words.get(i), "*") | Objects.equals((String)words.get(i), "+") | Objects.equals((String)words.get(i), "-") | Objects.equals((String)words.get(i), ":")))) {
//                        System.out.println("Некорректный знак/знаки. Попробуйте еще раз!");
                    break;
                }
            }
        }
        for (int j = 0; j < 10; j++) {
            for (int i = 0; i < words.size(); i += 1) { // удаляем пустоты
                if (Objects.equals((String) words.get(i), "")) {
                    words.remove(i);
                }
            }
        }

        Fraction[] frac = new Fraction[(words.size() + 1)];
        for (int i = 0; i < words.size(); i += 1) { // крафтим дроби
            if (((String) words.get(i)).length() > 1) {
                String[] fracture = ((String) words.get(i)).split("/");
                frac[i] = new Fraction(Integer.parseInt(fracture[0]), Integer.parseInt(fracture[1]));
            }
        }


        for (int i = 0; i < words.size(); i += 1) { // первый этап, избавляемся от умножения и деления
            if (Objects.equals((String) words.get(i), "*")) {
                words.set(i, Fraction.multi(frac[i - 1], frac[i + 1]));
                words.set(i - 1, "");
                words.set(i + 1, "");
            }
            if (Objects.equals((String) words.get(i), ":")) {
                words.set(i, Fraction.div(frac[i - 1], frac[i + 1]));
                words.set(i - 1, "");
                words.set(i + 1, "");
            }
        }
        for (int i = 0; i < words.size(); i += 1) { // удаляем пустоты
            if (Objects.equals((String) words.get(i), "")) {
                words.remove(i);
            }
        }


        ArrayList words2 = new ArrayList<>(); // новый массив в котором только + - и дроби
        for (int i = 0; i < words.size(); i++) {
            if (!Objects.equals((String) words.get(i), "")) {
                words2.add(words.get(i));
            }
        }
//        for (int i = 0; i < words2.size(); i = i + 1) {
//           System.out.println(words2.get(i));
//        }
        for (int i = 0; i < words2.size(); i = i + 1) {
            if (((String) words.get(i)).length() > 1) {
                String[] fracture = ((String) words2.get(i)).split("/");
                frac[i] = new Fraction(Integer.parseInt(fracture[0]), Integer.parseInt(fracture[1]));
            }
        }

        Fraction piggybank = new Fraction(frac[0].num, frac[0].den); // копилочка дробей

        for (int i = 1; i < words2.size(); i = i + 2) { // считывание дробей и их суммирование в копилку
            String a = (String) words2.get(i);
            if ("+".equals(a)) {
                String[] fracture = ((String) words.get(i+1)).split("/");
                frac[i] = new Fraction(Integer.parseInt(fracture[0]), Integer.parseInt(fracture[1]));
                String[] numbers = (Fraction.sum(piggybank, frac[i])).split("/");
                piggybank = new Fraction(Integer.parseInt(numbers[0]), Integer.parseInt(numbers[1]));
                ;
            } else if ("-".equals(a)) {
                String[] fracture = ((String) words.get(i+1)).split("/");
                frac[i] = new Fraction(Integer.parseInt(fracture[0]), Integer.parseInt(fracture[1]));
                String[] numbers = (Fraction.min(piggybank, frac[i])).split("/");
                piggybank = new Fraction(Integer.parseInt(numbers[0]), Integer.parseInt(numbers[1]));
                ;
            }
        }

        String[] fraction = piggybank.currentfrac().split("/"); // сокращение дроби
        int a = Integer.parseInt(fraction[0]);
        int b = Integer.parseInt(fraction[1]);
        int d = Fraction.gcd(Math.abs(a), Math.abs(b));
        piggybank = new Fraction(a / d, b / d);

        return piggybank;
    }

}


public class Main {
    public static void main(String[] args) throws Exception {

        int numerator, denominator, flag = 0;
        String input = "";
        Scanner in = new Scanner(System.in);
        while (true) { // выход на слове "quit"
            System.out.println("Введите выражение или 'quit' для выхода:");
//            input = in.nextLine();
            int imp = 0;
            if (!Objects.equals(input, "quit")) {
                // 4 простые операции
//                System.out.println("Результат: " + Fraction.process(input).currentfrac());
                StringCalculatorTest.testAdd(Fraction.process("1/2 - 1/3"), "1/2 - 1/3", "1/6");
                StringCalculatorTest.testAdd(Fraction.process("1/2 * 1/3"), "1/2 * 1/3", "1/6");
                StringCalculatorTest.testAdd(Fraction.process("1/2 : 1/3"), "1/2 : 1/3", "3/2");

                // 3 сложные операции
                StringCalculatorTest.testAdd(Fraction.process("1/2 + 1/3 - 1/2"), "1/2 + 1/3 - 1/2", "1/3");
                StringCalculatorTest.testAdd(Fraction.process("1/2 - 1/3 * 1/2"), "1/2 - 1/3 * 1/2", "1/3");
                StringCalculatorTest.testAdd(Fraction.process("6/2 : 1/3 - 1/2 : 5/6 + 1/5"), "6/2 : 1/3 - 1/2 : 5/6 + 1/5", "43/5");
//                System.out.println(Fraction.process("6/2 : ( 1/3 - 1/2 )").currentfrac());
//                System.out.println(Fraction.process("( 1/2 + 1/3 ) * ( 1/3 + 1/2 )").currentfrac());

                // 2 некорректные работы
                StringCalculatorTest.testAdd(Fraction.process("1/2 + 1/0 - 1/2"), "1/2 + 1/0 - 1/2", "no matter");
                StringCalculatorTest.testAdd(Fraction.process("1/2 - 153 * 1/2"), "1/2 - 153 * 1/2", "no matter");
                StringCalculatorTest.testAdd(Fraction.process("1/2 - 1/5 * 1/2"), "1/2 - 1/5 * 1/2", "555/1");


            } else {
                break;
            }
        }
    }
}
